import React, {Component} from 'react';
import {AsyncStorage, FlatList, Dimensions, View, Text, StyleSheet, TouchableHighlight} from 'react-native';
import {FormInput} from 'react-native-elements';
import firebase from '../firebase/firebase';

export default class ChatScreen extends Component{
    constructor(props){
        super(props);
        this.state ={ 
            text:' ',
            messages:[],
            isLoading:false,
            author:''
        }
    }

    componentDidMount = () => {
        console.log(Dimensions.get('window').width - 100);
        this.grabMessages();
        this._retrieveUsername();
    }

    _retrieveUsername = async() => {
        // This is an async call to grab our username in local storage.
        // We're not using proper authentication currently, 
        // so local storage it is! 

        try{
            const username = await AsyncStorage.getItem("username");
            if(username !== null){
                console.log(username);
                this.setState({
                    author:username
                });
            }
        }catch(error){
            console.log(error);
        }
        
    }
    grabMessages = () => { 

        // Grab the current messages
        let currentMessages = this.state.messages;

        // We reference our messages part of the database
        let messagesRef = firebase.database().ref('messages').orderByChild('time').limitToLast(50);
        
        // We add a listener here any time a child (message) is added.
        messagesRef.on('child_added', snapshot =>{
            let message = {
                messageText:snapshot.val().messageText, 
                id: snapshot.key,
                author:snapshot.val().author
            };

            // We then take each message and push them to our currentmessages
            currentMessages.push(message);

            // Once all is said and done, set the state here and we're good to go.

            // To do: Test the layout of the code here to make it more efficient. 
            // I think that the set state doesn't need to be inside this function...
            this.setState({
                messages:currentMessages
            })
        });
    }

    changeText = (text) => {

        // This method just changes the state 
        // to whatever was put in the input field.
        this.setState({
            text:text
        })
    };


    /*
        Send message will check input box length
        then will craft a message to send to firebase.
    */
    sendMessage = () => {
        if(this.state.text.length > 0){

        let message = {
            id:null,
            messageText:this.state.text,
            author:this.state.author,
            time:Date.now()
        };      

        // ref references the db area that we're pointing to.
        // push() generates a child location using a unique key and returns a reference.
        const newMsgRef = firebase.database()
                                .ref('messages')
                                .push();
        
        // the push command will return an object that includes an autogenerated key.
        message.id = newMsgRef.key;
        
        // set will write the data to the database location
        newMsgRef.set(message);

        // We reset the input box here.
        this.setState({
            text:''
        });
        }
    }

    render(){

        // Conditional rendering is here as we 
        // may have an empty chat!
        let list = null;

        // This flat list will automatically update
        // whenever the messages length changes 
        // This is a little bit of a cheatm but it works.
        if(this.state.messages.length > 0){
            list = <FlatList
                    extraData={this.state.messages.length}
                    data={this.state.messages}
                    keyExtractor={item => item.id}
                    renderItem={({item}) => (
                        <View>
                            <Text>{item.messageText} by {item.author}</Text>
                            </View>
                    )}>
                    </FlatList>
        }

        return(
            <View style={styles.screenStyle}>
                <View style={styles.chatWindow}>
                    {list}
                </View>
                <View style={styles.inputArea}>
                <FormInput
                containerStyle={styles.formInput}
                onChangeText={(text) => this.changeText(text)}
                value={this.state.text}
                placeholder={"Something funny..."}/>
                <TouchableHighlight onPress={this.sendMessage}>
                <View style={styles.sendButton}>
                        <Text style={{color:'white', textAlign:'center', textAlignVertical:'center'}}>Send</Text>
                </View>
                </TouchableHighlight>
                    
                </View>
                
            </View>
        )
    }
}

const styles = StyleSheet.create({

     screenStyle:{
         flex:1,
         flexDirection:'column'
     },
    chatWindow:{
        height:Dimensions.get('window').height - 200,
        width:Dimensions.get('window').width,
        backgroundColor:'green',
        marginBottom:10

    },
    formInput:{
        width:Dimensions.get('window').width - 100
    },
    sendButton:{
        height:50,
        width:50,
        backgroundColor:'blue'
    },

    inputArea:{
        flex:1,
        flexDirection:'row'
    }
})
